-- Demo: Tag-based Masking Policies
-- Last updated: 18SEP2022

-- Setup for demo
-- Create DB, Schema, Warehouse
USE ROLE SYSADMIN;
CREATE OR REPLACE DATABASE DEMO_DB;
USE SCHEMA DEMO_DB.PUBLIC;
USE WAREHOUSE INSTRUCTOR1_WH;

GRANT USAGE ON WAREHOUSE INSTRUCTOR1_WH TO PUBLIC;

-- Drop/Create Roles
USE ROLE SECURITYADMIN;
DROP ROLE IF EXISTS INSTRUCTOR1_DEVELOPER;
DROP ROLE IF EXISTS  INSTRUCTOR1_ANALYST;
DROP ROLE IF EXISTS  INSTRUCTOR1_SUPPORT;
DROP ROLE IF EXISTS  INSTRUCTOR1_REPORTING;
DROP ROLE IF EXISTS  INSTRUCTOR1_TAG_ADMIN;

CREATE ROLE INSTRUCTOR1_DEVELOPER;
CREATE ROLE INSTRUCTOR1_ANALYST;
CREATE ROLE INSTRUCTOR1_SUPPORT;
CREATE ROLE INSTRUCTOR1_REPORTING;
CREATE ROLE INSTRUCTOR1_TAG_ADMIN;

-- Grants for hierarchy
GRANT ROLE INSTRUCTOR1_DEVELOPER TO ROLE SYSADMIN;
GRANT ROLE INSTRUCTOR1_ANALYST TO ROLE SYSADMIN;
GRANT ROLE INSTRUCTOR1_SUPPORT TO ROLE SYSADMIN;
GRANT ROLE INSTRUCTOR1_REPORTING TO ROLE SYSADMIN;
GRANT ROLE INSTRUCTOR1_TAG_ADMIN TO ROLE SYSADMIN;

-- Grant usage 
USE ROLE SYSADMIN;
GRANT USAGE ON DATABASE DEMO_DB TO ROLE INSTRUCTOR1_DEVELOPER;
GRANT USAGE ON DATABASE DEMO_DB TO ROLE INSTRUCTOR1_ANALYST;
GRANT USAGE ON DATABASE DEMO_DB TO ROLE INSTRUCTOR1_SUPPORT;
GRANT USAGE ON DATABASE DEMO_DB TO ROLE INSTRUCTOR1_REPORTING;
GRANT USAGE ON DATABASE DEMO_DB TO ROLE INSTRUCTOR1_TAG_ADMIN;

GRANT USAGE ON SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_DEVELOPER;
GRANT USAGE ON SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_ANALYST;
GRANT USAGE ON SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_SUPPORT;
GRANT USAGE ON SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_REPORTING;
GRANT USAGE ON SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_TAG_ADMIN;

-- Not using recommended functional/access roles stragtegy for demo purposes
-- Grant priviledges
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_DEVELOPER;
GRANT SELECT ON ALL TABLES IN SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_ANALYST;
GRANT ALL ON ALL TABLES IN SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_SUPPORT;
GRANT SELECT ON ALL TABLES IN SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_REPORTING;

-- Future grants
USE ROLE SECURITYADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_DEVELOPER;
GRANT SELECT ON FUTURE TABLES IN SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_ANALYST;
GRANT ALL ON FUTURE TABLES IN SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_SUPPORT;
GRANT SELECT ON FUTURE TABLES IN SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_REPORTING;
GRANT CREATE MASKING POLICY ON SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_TAG_ADMIN;

-- Grants to create and apply tags + apply masking policy to TAG_ADMIN role
USE ROLE ACCOUNTADMIN;
GRANT APPLY TAG ON ACCOUNT TO ROLE INSTRUCTOR1_TAG_ADMIN;
GRANT CREATE TAG ON SCHEMA DEMO_DB.PUBLIC TO ROLE INSTRUCTOR1_TAG_ADMIN;
GRANT APPLY MASKING POLICY ON ACCOUNT TO ROLE INSTRUCTOR1_TAG_ADMIN; -- Can use SECURITYADMIN role as well

-- NOTE: The role TAG_ADMIN owns the tag and the masking policies

-- Create tag
USE ROLE INSTRUCTOR1_TAG_ADMIN;
USE SCHEMA DEMO_DB.PUBLIC;
CREATE OR REPLACE TAG PII ALLOWED_VALUES 'PUBLIC','RESTRICTED','CONFIDENTIAL';

-- Create masking policies for three data types (string, number, date)
CREATE OR REPLACE MASKING POLICY PII_DEMO_DB_STRING AS (val string) returns string ->
CASE
-- Listed from most to least restricted order
    WHEN SYSTEM$GET_TAG_ON_CURRENT_COLUMN('PII') = 'CONFIDENTIAL'
    THEN
        CASE
            WHEN CURRENT_ROLE() IN ('INSTRUCTOR1_SUPPORT') THEN VAL
            ELSE '*** PII CONFIDENTIAL - STRING IS MASKED ***'
        END
    WHEN SYSTEM$GET_TAG_ON_CURRENT_COLUMN('PII') = 'RESTRICTED'
    THEN
        CASE
            WHEN CURRENT_ROLE() IN ('INSTRUCTOR1_SUPPORT','INSTRUCTOR1_DEVELOPER')
            THEN val
            ELSE '*** PII RESTRICTED - STRING IS MASKED ***'
        END
    WHEN SYSTEM$GET_TAG_ON_CURRENT_COLUMN('PII') = 'PUBLIC'
    THEN val
    ELSE '*** PII MASKING FAILED: COLUMN IS NOT MAPPED TO A PII TYPE. ***'
END;

CREATE OR REPLACE MASKING POLICY PII_DEMO_DB_NUMBER AS (val number) returns number ->
CASE
-- Listed from most to least restricted order
    WHEN SYSTEM$GET_TAG_ON_CURRENT_COLUMN('PII') = 'CONFIDENTIAL'
    THEN
        CASE
            WHEN CURRENT_ROLE() IN ('INSTRUCTOR1_SUPPORT') THEN VAL
            ELSE NULL
        END
    WHEN SYSTEM$GET_TAG_ON_CURRENT_COLUMN('PII') = 'RESTRICTED'
    THEN
        CASE
            WHEN CURRENT_ROLE() IN ('INSTRUCTOR1_SUPPORT','INSTRUCTOR1_DEVELOPER')
            THEN val
            ELSE NULL
        END
    WHEN SYSTEM$GET_TAG_ON_CURRENT_COLUMN('PII') = 'PUBLIC'
    THEN val
    ELSE NULL
END;

CREATE OR REPLACE MASKING POLICY PII_DEMO_DB_DATE AS (val date) returns date ->
CASE
-- Listed from most to least restricted order
    WHEN SYSTEM$GET_TAG_ON_CURRENT_COLUMN('PII') = 'CONFIDENTIAL'
    THEN
        CASE
            WHEN CURRENT_ROLE() IN ('INSTRUCTOR1_SUPPORT') THEN VAL
            ELSE NULL
        END
    WHEN SYSTEM$GET_TAG_ON_CURRENT_COLUMN('PII') = 'RESTRICTED'
    THEN
        CASE
            WHEN CURRENT_ROLE() IN ('INSTRUCTOR1_SUPPORT','INSTRUCTOR1_DEVELOPER')
            THEN val
            ELSE NULL
        END
    WHEN SYSTEM$GET_TAG_ON_CURRENT_COLUMN('PII') = 'PUBLIC'
    THEN val
    ELSE NULL
END;

-- Show the newly created masking policies
show masking policies like 'pii%';

-- Unset policy assignment if needed for demo
USE ROLE INSTRUCTOR1_TAG_ADMIN;
ALTER TAG PII UNSET 
MASKING POLICY PII_DEMO_DB_STRING,
MASKING POLICY PII_DEMO_DB_NUMBER,
MASKING POLICY PII_DEMO_DB_DATE;

-- Assign the 3 masking policies to the PII tag
USE ROLE INSTRUCTOR1_TAG_ADMIN;
ALTER TAG PII SET 
MASKING POLICY PII_DEMO_DB_STRING,
MASKING POLICY PII_DEMO_DB_NUMBER,
MASKING POLICY PII_DEMO_DB_DATE;

-- Create dummy table for testing
USE ROLE SYSADMIN;
USE WAREHOUSE INSTRUCTOR1_WH;

CREATE OR REPLACE TABLE DEMO_DB.PUBLIC.EMPLOYEE (ID NUMBER, NAME VARCHAR, DOB DATE, SSN VARCHAR,DEPT VARCHAR);

-- Insert random data into dummy table
-- (Random strings being generated for NAME and DEPT column values)
INSERT INTO DEMO_DB.PUBLIC.EMPLOYEE
SELECT UNIFORM(10000,99999,ABS(RANDOM())) AS ID, RANDSTR(50,RANDOM()) AS NAME, '1950-01-01'::DATE AS DOB, UNIFORM(111111111,999999999,ABS(RANDOM())) AS SSN, RANDSTR(10,RANDOM()) AS DEPT 
FROM TABLE(GENERATOR(ROWCOUNT => 50));

-- Apply tag to columns ID, NAME, DOB, SSN, DEPT
-- NOTE: Since the tag "PII" is already associated with a masking policy,
-- we only have to assign the TAG to a given sensitive column
-- and *NOT* assign a given masking policy to each of these columns
-- like we saw in a prior data masking demo

-- Unset tag for each column only if needed for the demo
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN ID UNSET TAG PII;
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN NAME UNSET TAG PII;
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN DOB UNSET TAG PII;
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN SSN UNSET TAG PII;
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN DEPT UNSET TAG PII;

-- Apply tag to columns
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN ID SET TAG PII ='RESTRICTED';
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN NAME SET TAG PII ='PUBLIC';
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN DOB SET TAG PII ='CONFIDENTIAL';
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN SSN SET TAG PII ='CONFIDENTIAL';
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN DEPT SET TAG PII ='RESTRICTED';

-- Let's do some tests...
USE ROLE SYSADMIN; -- Sees only NAME column data in clear text
SELECT * FROM DEMO_DB.PUBLIC.EMPLOYEE;

USE ROLE INSTRUCTOR1_DEVELOPER; -- Sees ID, NAME and DEPT column data in clear text
SELECT * FROM DEMO_DB.PUBLIC.EMPLOYEE;

USE ROLE INSTRUCTOR1_ANALYST; -- Sees only NAME column data in clear text
SELECT * FROM DEMO_DB.PUBLIC.EMPLOYEE;

USE ROLE INSTRUCTOR1_SUPPORT; -- Sees all column data in clear text
SELECT * FROM DEMO_DB.PUBLIC.EMPLOYEE;

USE ROLE INSTRUCTOR1_REPORTING; -- Sees only NAME column data in clear text
SELECT * FROM DEMO_DB.PUBLIC.EMPLOYEE;

-- Errors out as TRAINING_ROLE is not authorized to access DEMO_DB.PUBLIC.EMPLOYEE
USE ROLE TRAINING_ROLE;
SELECT * FROM DEMO_DB.PUBLIC.EMPLOYEE;

-- *** Demo clean-up ***

-- Unset tag for the 5 sensitive EMPLOYEE table columns
USE ROLE SYSADMIN;
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN ID UNSET TAG PII;
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN NAME UNSET TAG PII;
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN DOB UNSET TAG PII;
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN SSN UNSET TAG PII;
ALTER TABLE DEMO_DB.PUBLIC.EMPLOYEE MODIFY COLUMN DEPT UNSET TAG PII;

-- Unset masking policy assignment to PII tag
-- This has to be done before you drop the tag
USE ROLE INSTRUCTOR1_TAG_ADMIN;
USE SCHEMA DEMO_DB.PUBLIC;

ALTER TAG PII UNSET 
MASKING POLICY PII_DEMO_DB_STRING,
MASKING POLICY PII_DEMO_DB_NUMBER,
MASKING POLICY PII_DEMO_DB_DATE;

-- Drop the tag
DROP TAG if exists PII; -- Can only drop the tag after first unsetting it for the 3 masking policies

-- Drop the "PII%"" masking policies
show masking policies like 'pii%'; -- Shows the 3 masking policies

drop masking policy if exists PII_DEMO_DB_DATE;
drop masking policy if exists PII_DEMO_DB_NUMBER;
drop masking policy if exists PII_DEMO_DB_STRING;

show masking policies like 'pii%'; -- Shows no policies

-- Clean-up all custom roles used in the demo
USE ROLE SECURITYADMIN;
DROP ROLE IF EXISTS INSTRUCTOR1_DEVELOPER;
DROP ROLE IF EXISTS  INSTRUCTOR1_ANALYST;
DROP ROLE IF EXISTS  INSTRUCTOR1_SUPPORT;
DROP ROLE IF EXISTS  INSTRUCTOR1_REPORTING;
DROP ROLE IF EXISTS  INSTRUCTOR1_TAG_ADMIN;

